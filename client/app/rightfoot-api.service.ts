import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { formatDate } from '@angular/common';

import { parsePhoneNumberFromString } from 'libphonenumber-js';
import {
  AddPlaidTokenToBeneficiaryRequest,
  AddPlaidTokenToBeneficiaryResponse,
  Beneficiary,
  CreateBeneficiaryRequest,
  CreateBeneficiaryResponse,
  CreatePaymentRequest,
  CreatePaymentResponse,
  Payment
} from 'rightfoot-node/1-3/api';
import { Observable } from 'rxjs';
import { map, tap } from 'rxjs/operators';

import { environment } from '../environments/environment';
import { StorageService } from './storage.service';
import { DemographicsFormValue } from './demographics-form-value.interface';

/**
 * This service is used for communication with the Rightfoot Public API server
 * to create beneficiaries, make payments, etc.
 */
@Injectable({
  providedIn: 'root'
})
export class RightfootApiService {
  private static readonly CREATE_BENEFICIARY_URL = `${environment.apiUrl}/beneficiaries`;
  private static readonly ADD_PLAID_TOKEN_URL = `${environment.apiUrl}/beneficiaries/addPlaidToken`;
  private static readonly PAYMENTS_URL = `${environment.apiUrl}/payments`;

  constructor(private httpClient: HttpClient,
              private storageService: StorageService) {
  }

  /**
   * Creates new beneficiary user based on the user provided demographics data.
   * @param formValue Value of the demographics form group.
   * @returns Observable<Beneficiary> newly created beneficiary user.
   */
  createBeneficiary(formValue: DemographicsFormValue): Observable<Beneficiary> {
    const request: CreateBeneficiaryRequest = {
      ...formValue,
      dateOfBirth: formatDate(formValue.dateOfBirth, 'yyyy-MM-dd', 'en-US'),
      phoneNumber: parsePhoneNumberFromString(formValue.phoneNumber).formatInternational()
    };

    return this.httpClient.post<CreateBeneficiaryResponse>(RightfootApiService.CREATE_BENEFICIARY_URL, request).pipe(
      map(response => response.beneficiary),
      tap(beneficiary => this.storageService.storeUserId(beneficiary))
    );
  }

  /**
   * Connects Plaid Public Token with a beneficiary.
   * Enables payments.
   *
   * @param beneficiaryUuid Unique identifier generated by Rightfoot.
   * @param plaidPublicToken Public token obtained from Plaid
   * using Rightfoot's Plaid public key.
   */
  public addPlaidToken(beneficiaryUuid: string, plaidPublicToken: string) {
    // TODO(willjschmitt): Remove union type once porting from `httpClient` to
    //  the SDK implementation.
    const request: AddPlaidTokenToBeneficiaryRequest & { uuid: string; } = {
      uuid: beneficiaryUuid,
      plaidPublicToken
    };

    return this.httpClient.post<AddPlaidTokenToBeneficiaryResponse>(RightfootApiService.ADD_PLAID_TOKEN_URL, request).pipe(
      map(response => response.beneficiary),
      tap(() => this.storageService.storePaymentsEnabled(true))
    );
  }

  /**
   * Issues a request to transfer funds from the funding source to the beneficiary's loan account.
   * @param beneficiaryUuid Unique identifier generated by Rightfoot.
   * @param amount Amount in USD provided by a user and parsed as a float.
   */
  public createPayment(beneficiaryUuid: string, amount: number): Observable<Payment> {
    const request: CreatePaymentRequest = {
      beneficiaryUuid,
      paymentAmount: parseFloat(amount.toFixed(2)) * 100
    };

    return this.httpClient.post<CreatePaymentResponse>(RightfootApiService.PAYMENTS_URL, request).pipe(
      map(response => response.payment),
      tap(payment => {
        this.storageService.storePaymentUuid(payment.uuid);
        this.storageService.storeResponse(JSON.stringify(payment));
        this.storageService.storeCurrentStep(3);
      })
    );
  }

  /**
   * This request retrieves an existing payment, updated with the latest status
   * of its processing along with error information.
   * @param uuid Unique identifier generated by Rightfoot for the payment.
   */
  public getPayment(uuid: string): Observable<Payment> {
    return this.httpClient.get<CreatePaymentResponse>(`${RightfootApiService.PAYMENTS_URL}/${uuid}`)
      .pipe(map(response => response.payment));
  }
}
